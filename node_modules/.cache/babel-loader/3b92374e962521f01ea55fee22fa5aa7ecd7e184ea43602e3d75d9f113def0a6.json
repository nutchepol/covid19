{"ast":null,"code":"import axios from 'axios';\nimport Chart from 'chart.js';\nexport default {\n  name: 'DataDisplay',\n  data() {\n    return {\n      data: [],\n      loading: true,\n      selectedDate: '',\n      myChart: ''\n    };\n  },\n  mounted() {\n    this.getData();\n  },\n  methods: {\n    getData() {\n      axios.get('https://disease.sh/v3/covid-19/historical?lastdays=31').then(response => {\n        this.data = response.data;\n        this.selectedDate = Object.keys(this.data[0].timeline.cases)[Object.keys(this.data[0].timeline.cases).length - 1];\n        this.loading = false;\n        this.createGraph();\n      }).catch(error => {\n        console.log(error);\n      });\n    },\n    createGraph() {\n      let ctx = this.$refs.myChart.getContext('2d');\n      this.myChart = new Chart(ctx, {\n        type: 'line',\n        data: {\n          labels: this.data[0].timeline.cases,\n          datasets: [{\n            label: 'Cases',\n            data: this.data.map(item => item.timeline.cases),\n            borderColor: '#3e95cd',\n            fill: false\n          }, {\n            label: 'Deaths',\n            data: this.data.map(item => item.timeline.deaths),\n            borderColor: '#ff6384',\n            fill: false\n          }, {\n            label: 'Recovered',\n            data: this.data.map(item => item.timeline.recovered),\n            borderColor: '#33cc33',\n            fill: false\n          }]\n        },\n        options: {\n          title: {\n            display: true,\n            text: 'COVID-19 Cases by Date'\n          },\n          legend: {\n            display: true,\n            position: 'bottom'\n          },\n          scales: {\n            xAxes: [{\n              type: 'time',\n              time: {\n                unit: 'day'\n              }\n            }],\n            yAxes: [{\n              ticks: {\n                beginAtZero: true\n              }\n            }]\n          }\n        }\n      });\n    },\n    updateData() {\n      this.createGraph();\n    }\n  }\n};","map":{"version":3,"names":["axios","Chart","name","data","loading","selectedDate","myChart","mounted","getData","methods","get","then","response","Object","keys","timeline","cases","length","createGraph","catch","error","console","log","ctx","$refs","getContext","type","labels","datasets","label","map","item","borderColor","fill","deaths","recovered","options","title","display","text","legend","position","scales","xAxes","time","unit","yAxes","ticks","beginAtZero","updateData"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/DataDisplay.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>COVID-19 Cases by Country</h1>\n        <div v-if=\"loading\">Loading...</div>\n        <div v-else>\n            <div>\n                <label for=\"date\">Select date:</label>\n                <input type=\"date\" id=\"date\" v-model=\"selectedDate\" @change=\"updateData\" />\n            </div>\n            <div>\n                <canvas id=\"myChart\" ref=\"myChart\">{myChart}</canvas>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Cases</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"item in data\" :key=\"item.country\">\n                        <td>{{ item.country }}</td>\n                        <td>{{ item.timeline.cases[selectedDate] }}</td>\n                        <td>{{ item.timeline.deaths[selectedDate] }}</td>\n                        <td>{{ item.timeline.recovered[selectedDate] }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Chart from 'chart.js';\n\nexport default {\n    name: 'DataDisplay',\n    data() {\n        return {\n            data: [],\n            loading: true,\n            selectedDate: '',\n            myChart: ''\n        }\n    },\n    mounted() {\n        this.getData();\n    },\n    methods: {\n        getData() {\n            axios.get('https://disease.sh/v3/covid-19/historical?lastdays=31')\n                .then(response => {\n                    this.data = response.data;\n                    this.selectedDate = Object.keys(this.data[0].timeline.cases)[Object.keys(this.data[0].timeline.cases).length - 1];\n                    this.loading = false;\n                    this.createGraph();\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        createGraph() {\n            let ctx = this.$refs.myChart.getContext('2d');\n            this.myChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: this.data[0].timeline.cases,\n                    datasets: [\n                        {\n                            label: 'Cases',\n                            data: this.data.map(item => item.timeline.cases),\n                            borderColor: '#3e95cd',\n                            fill: false\n                        },\n                        {\n                            label: 'Deaths',\n                            data: this.data.map(item => item.timeline.deaths),\n                            borderColor: '#ff6384',\n                            fill: false\n                        },\n                        {\n                            label: 'Recovered',\n                            data: this.data.map(item => item.timeline.recovered),\n                            borderColor: '#33cc33',\n                            fill: false\n                        }\n                    ]\n                },\n                options: {\n                    title: {\n                        display: true,\n                        text: 'COVID-19 Cases by Date'\n                    },\n                    legend: {\n                        display: true,\n                        position: 'bottom'\n                    },\n                    scales: {\n                        xAxes: [{\n                            type: 'time',\n                            time: {\n                                unit: 'day'\n                            }\n                        }],\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            });\n        },\n        updateData() {\n            this.createGraph();\n        }\n    }\n}\n</script>\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}