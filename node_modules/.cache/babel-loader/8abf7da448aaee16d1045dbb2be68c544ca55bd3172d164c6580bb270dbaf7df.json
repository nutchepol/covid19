{"ast":null,"code":"import { Chart } from 'vue-chartjs';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default {\n  props: ['data', 'selectedDate'],\n  data() {\n    return {\n      chart: null,\n      data1: {\n        type: 'line',\n        data: {\n          labels: this.data.map(item => item.country),\n          datasets: [{\n            label: 'Cases',\n            backgroundColor: 'rgba(255, 99, 132, 0.2)',\n            borderColor: 'rgb(255, 99, 132)',\n            data: this.data.map(item => item.timeline.cases[this.selectedDate])\n          }, {\n            label: 'Deaths',\n            backgroundColor: 'rgba(54, 162, 235, 0.2)',\n            borderColor: 'rgb(54, 162, 235)',\n            data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n          }, {\n            label: 'Recovered',\n            backgroundColor: 'rgba(255, 206, 86, 0.2)',\n            borderColor: 'rgb(255, 206, 86)',\n            data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n          }]\n        },\n        options: {\n          responsive: true\n        }\n      }\n    };\n  },\n  mounted() {\n    let ctx = this.$refs.myDiv;\n    console.log(ctx);\n    console.log(this.$refs[\"myDiv\"]);\n    this.forecastChart = new Chart(ctx, this.data1);\n  },\n  // watch: {\n  //     selectedDate: function () {\n  //         console.log('fsddfdsf', this.selectedDate, this.chart);\n\n  //         this.data1.labels = this.data.map(item => item.country),\n  //             this.data1.datasets = [{\n  //                 label: 'Cases',\n  //                 backgroundColor: 'rgba(255, 99, 132, 0.2)',\n  //                 borderColor: 'rgb(255, 99, 132)',\n  //                 data: this.data.map(item => item.timeline.cases[this.selectedDate])\n  //             }, {\n  //                 label: 'Deaths',\n  //                 backgroundColor: 'rgba(54, 162, 235, 0.2)',\n  //                 borderColor: 'rgb(54, 162, 235)',\n  //                 data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n  //             }, {\n  //                 label: 'Recovered',\n  //                 backgroundColor: 'rgba(255, 206, 86, 0.2)',\n  //                 borderColor: 'rgb(255, 206, 86)',\n  //                 data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n  //             }]\n\n  //         this.forecastChart.updateChart()\n\n  //     }\n  // },\n  method: {\n    updateChart() {\n      let chartStatus = Chart.getChart(this.forecastChart); // key change\n      chartStatus.destroy(); // key change\n      this.animation = 0;\n      this.renderChart();\n    }\n  }\n};","map":{"version":3,"names":["Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","props","data","chart","data1","type","labels","map","item","country","datasets","label","backgroundColor","borderColor","timeline","cases","selectedDate","deaths","recovered","options","responsive","mounted","ctx","$refs","myDiv","console","log","forecastChart","method","updateChart","chartStatus","getChart","destroy","animation","renderChart"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/ChartCountry.vue"],"sourcesContent":["<template>\n    <div>\n        <h2>Cases by Country</h2>\n        <!-- <Line :data=\"data1\" :options='options' id='chart' /> -->\n        <!-- <canvas ref='myDiv'></canvas> -->\n\n    </div>\n</template>\n\n<script>\nimport { Chart } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\nexport default {\n    props: ['data', 'selectedDate',],\n\n\n    data() {\n        return {\n            chart: null,\n            data1:\n            {\n                type: 'line',\n                data: {\n                    labels: this.data.map(item => item.country),\n                    datasets: [{\n                        label: 'Cases',\n                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        data: this.data.map(item => item.timeline.cases[this.selectedDate])\n                    }, {\n                        label: 'Deaths',\n                        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                        borderColor: 'rgb(54, 162, 235)',\n                        data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n                    }, {\n                        label: 'Recovered',\n                        backgroundColor: 'rgba(255, 206, 86, 0.2)',\n                        borderColor: 'rgb(255, 206, 86)',\n                        data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n                    }]\n                },\n                options: {\n                    responsive: true,\n                }\n            }\n\n        }\n    },\n    mounted() {\n        let ctx = this.$refs.myDiv;\n        console.log(ctx);\n        console.log(this.$refs[\"myDiv\"])\n        this.forecastChart = new Chart(ctx, this.data1)\n    },\n    // watch: {\n    //     selectedDate: function () {\n    //         console.log('fsddfdsf', this.selectedDate, this.chart);\n\n    //         this.data1.labels = this.data.map(item => item.country),\n    //             this.data1.datasets = [{\n    //                 label: 'Cases',\n    //                 backgroundColor: 'rgba(255, 99, 132, 0.2)',\n    //                 borderColor: 'rgb(255, 99, 132)',\n    //                 data: this.data.map(item => item.timeline.cases[this.selectedDate])\n    //             }, {\n    //                 label: 'Deaths',\n    //                 backgroundColor: 'rgba(54, 162, 235, 0.2)',\n    //                 borderColor: 'rgb(54, 162, 235)',\n    //                 data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n    //             }, {\n    //                 label: 'Recovered',\n    //                 backgroundColor: 'rgba(255, 206, 86, 0.2)',\n    //                 borderColor: 'rgb(255, 206, 86)',\n    //                 data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n    //             }]\n\n    //         this.forecastChart.updateChart()\n\n\n    //     }\n    // },\n    method: {\n        updateChart() {\n            let chartStatus = Chart.getChart(this.forecastChart)  // key change\n            chartStatus.destroy()                                 // key change\n            this.animation = 0\n            this.renderChart()\n        },\n\n\n    }\n}\n</script>\n"],"mappings":"AAUA,SAASA,KAAI,QAAS,aAAa;AACnC,SACIA,KAAI,IAAKC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAK,QACF,UAAS;AAChBP,OAAO,CAACQ,QAAQ,CACZP,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAK,CACT;AACA,eAAe;EACXE,KAAK,EAAE,CAAC,MAAM,EAAE,cAAc,CAAE;EAGhCC,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE,IAAI;MACXC,KAAK,EACL;QACIC,IAAI,EAAE,MAAM;QACZH,IAAI,EAAE;UACFI,MAAM,EAAE,IAAI,CAACJ,IAAI,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,OAAO,CAAC;UAC3CC,QAAQ,EAAE,CAAC;YACPC,KAAK,EAAE,OAAO;YACdC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,mBAAmB;YAChCX,IAAI,EAAE,IAAI,CAACA,IAAI,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACM,QAAQ,CAACC,KAAK,CAAC,IAAI,CAACC,YAAY,CAAC;UACtE,CAAC,EAAE;YACCL,KAAK,EAAE,QAAQ;YACfC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,mBAAmB;YAChCX,IAAI,EAAE,IAAI,CAACA,IAAI,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACM,QAAQ,CAACG,MAAM,CAAC,IAAI,CAACD,YAAY,CAAC;UACvE,CAAC,EAAE;YACCL,KAAK,EAAE,WAAW;YAClBC,eAAe,EAAE,yBAAyB;YAC1CC,WAAW,EAAE,mBAAmB;YAChCX,IAAI,EAAE,IAAI,CAACA,IAAI,CAACK,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACM,QAAQ,CAACI,SAAS,CAAC,IAAI,CAACF,YAAY,CAAC;UAC1E,CAAC;QACL,CAAC;QACDG,OAAO,EAAE;UACLC,UAAU,EAAE;QAChB;MACJ;IAEJ;EACJ,CAAC;EACDC,OAAOA,CAAA,EAAG;IACN,IAAIC,GAAE,GAAI,IAAI,CAACC,KAAK,CAACC,KAAK;IAC1BC,OAAO,CAACC,GAAG,CAACJ,GAAG,CAAC;IAChBG,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,KAAK,CAAC,OAAO,CAAC;IAC/B,IAAI,CAACI,aAAY,GAAI,IAAIpC,KAAK,CAAC+B,GAAG,EAAE,IAAI,CAAClB,KAAK;EAClD,CAAC;EACD;EACA;EACA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;;EAEA;;EAGA;EACA;EACAwB,MAAM,EAAE;IACJC,WAAWA,CAAA,EAAG;MACV,IAAIC,WAAU,GAAIvC,KAAK,CAACwC,QAAQ,CAAC,IAAI,CAACJ,aAAa,GAAG;MACtDG,WAAW,CAACE,OAAO,EAAC,EAAkC;MACtD,IAAI,CAACC,SAAQ,GAAI;MACjB,IAAI,CAACC,WAAW,EAAC;IACrB;EAGJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}