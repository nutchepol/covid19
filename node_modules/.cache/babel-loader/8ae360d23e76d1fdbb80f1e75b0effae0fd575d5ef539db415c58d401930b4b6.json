{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Cases by Country\", -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Line = _resolveComponent(\"Line\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createVNode(_component_Line, {\n    data: $data.data1,\n    options: _ctx.options,\n    id: \"myChart\"\n  }, null, 8 /* PROPS */, [\"data\", \"options\"]), _createCommentVNode(\" <canvas id='myChart' ref='myDiv'></canvas> \")]);\n}","map":{"version":3,"names":["_createElementVNode","_createElementBlock","_hoisted_1","_createVNode","_component_Line","data","$data","data1","options","_ctx","id","_createCommentVNode"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/ChartCountry.vue"],"sourcesContent":["<template>\n    <div>\n        <h2>Cases by Country</h2>\n        <Line :data=\"data1\" :options='options' id='myChart' />\n        <!-- <canvas id='myChart' ref='myDiv'></canvas> -->\n\n    </div>\n</template>\n\n<script>\nimport { Chart } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\nexport default {\n    props: ['data', 'selectedDate',],\n\n\n    data() {\n        return {\n            chart: null,\n            data1:\n            {\n                type: 'line',\n                data: {\n                    labels: this.data.map(item => item.country),\n                    datasets: [{\n                        label: 'Cases',\n                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        data: this.data.map(item => item.timeline.cases[this.selectedDate])\n                    }, {\n                        label: 'Deaths',\n                        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                        borderColor: 'rgb(54, 162, 235)',\n                        data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n                    }, {\n                        label: 'Recovered',\n                        backgroundColor: 'rgba(255, 206, 86, 0.2)',\n                        borderColor: 'rgb(255, 206, 86)',\n                        data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n                    }]\n                },\n                options: {\n                    responsive: true,\n                }\n            }\n\n        }\n    },\n    mounted() {\n        const ctx = document.getElementById('myChart');\n        console.log(ctx);\n        // console.log(this.$refs[\"myDiv\"])\n        this.forecastChart = new Chart(ctx, this.data1)\n    },\n    // watch: {\n    //     selectedDate: function () {\n    //         console.log('fsddfdsf', this.selectedDate, this.chart);\n\n    //         this.data1.labels = this.data.map(item => item.country),\n    //             this.data1.datasets = [{\n    //                 label: 'Cases',\n    //                 backgroundColor: 'rgba(255, 99, 132, 0.2)',\n    //                 borderColor: 'rgb(255, 99, 132)',\n    //                 data: this.data.map(item => item.timeline.cases[this.selectedDate])\n    //             }, {\n    //                 label: 'Deaths',\n    //                 backgroundColor: 'rgba(54, 162, 235, 0.2)',\n    //                 borderColor: 'rgb(54, 162, 235)',\n    //                 data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n    //             }, {\n    //                 label: 'Recovered',\n    //                 backgroundColor: 'rgba(255, 206, 86, 0.2)',\n    //                 borderColor: 'rgb(255, 206, 86)',\n    //                 data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n    //             }]\n\n    //         this.forecastChart.updateChart()\n\n\n    //     }\n    // },\n    method: {\n        updateChart() {\n            let chartStatus = Chart.getChart(this.forecastChart)  // key change\n            chartStatus.destroy()                                 // key change\n            this.animation = 0\n            this.renderChart()\n        },\n\n\n    }\n}\n</script>\n"],"mappings":";gCAEQA,mBAAA,CAAyB,YAArB,kBAAgB;;;;uBADxBC,mBAAA,CAKM,cAJFC,UAAyB,EACzBC,YAAA,CAAsDC,eAAA;IAA/CC,IAAI,EAAEC,KAAA,CAAAC,KAAK;IAAGC,OAAO,EAAEC,IAAA,CAAAD,OAAO;IAAEE,EAAE,EAAC;gDAC1CC,mBAAA,gDAAmD,C"},"metadata":{},"sourceType":"module","externalDependencies":[]}