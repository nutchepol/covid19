{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"COVID-19 Cases by Country\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"date\"\n}, \"Select date:\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  id: \"myChart\",\n  ref: \"myChart\"\n};\nconst _hoisted_6 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Country\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Cases\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Deaths\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Recovered\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Loading...\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"date\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.selectedDate = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.updateData && $options.updateData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.selectedDate]])]), _createElementVNode(\"div\", null, [_createElementVNode(\"canvas\", _hoisted_5, \"{this.myChart}\", 512 /* NEED_PATCH */)]), _createElementVNode(\"table\", null, [_hoisted_6, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.data, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.country\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.country), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.cases[$data.selectedDate]), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.deaths[$data.selectedDate]), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.recovered[$data.selectedDate]), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]))]);\n}","map":{"version":3,"names":["_createElementVNode","for","id","ref","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_hoisted_3","_hoisted_4","type","selectedDate","$event","onChange","_cache","args","$options","updateData","_hoisted_5","_hoisted_6","_Fragment","_renderList","data","item","key","country","_toDisplayString","timeline","cases","deaths","recovered"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/DataDisplay.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>COVID-19 Cases by Country</h1>\n        <div v-if=\"loading\">Loading...</div>\n        <div v-else>\n            <div>\n                <label for=\"date\">Select date:</label>\n                <input type=\"date\" id=\"date\" v-model=\"selectedDate\" @change=\"updateData\" />\n            </div>\n            <div>\n                <canvas id=\"myChart\" ref=\"myChart\">{this.myChart}</canvas>\n            </div>\n            <table>\n                <thead>\n                    <tr>\n                        <th>Country</th>\n                        <th>Cases</th>\n                        <th>Deaths</th>\n                        <th>Recovered</th>\n                    </tr>\n                </thead>\n                <tbody>\n                    <tr v-for=\"item in data\" :key=\"item.country\">\n                        <td>{{ item.country }}</td>\n                        <td>{{ item.timeline.cases[selectedDate] }}</td>\n                        <td>{{ item.timeline.deaths[selectedDate] }}</td>\n                        <td>{{ item.timeline.recovered[selectedDate] }}</td>\n                    </tr>\n                </tbody>\n            </table>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport Chart from 'chart.js';\n\nexport default {\n    name: 'DataDisplay',\n    data() {\n        return {\n            data: [],\n            loading: true,\n            selectedDate: '',\n            myChart: myChart\n        }\n    },\n    mounted() {\n        this.getData();\n    },\n    methods: {\n        getData() {\n            axios.get('https://disease.sh/v3/covid-19/historical?lastdays=31')\n                .then(response => {\n                    this.data = response.data;\n                    this.selectedDate = Object.keys(this.data[0].timeline.cases)[Object.keys(this.data[0].timeline.cases).length - 1];\n                    this.loading = false;\n                    this.createGraph();\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        createGraph() {\n            let ctx = this.$refs.myChart.getContext('2d');\n            const myChart = new Chart(ctx, {\n                type: 'line',\n                data: {\n                    labels: this.data[0].timeline.cases,\n                    datasets: [\n                        {\n                            label: 'Cases',\n                            data: this.data.map(item => item.timeline.cases),\n                            borderColor: '#3e95cd',\n                            fill: false\n                        },\n                        {\n                            label: 'Deaths',\n                            data: this.data.map(item => item.timeline.deaths),\n                            borderColor: '#ff6384',\n                            fill: false\n                        },\n                        {\n                            label: 'Recovered',\n                            data: this.data.map(item => item.timeline.recovered),\n                            borderColor: '#33cc33',\n                            fill: false\n                        }\n                    ]\n                },\n                options: {\n                    title: {\n                        display: true,\n                        text: 'COVID-19 Cases by Date'\n                    },\n                    legend: {\n                        display: true,\n                        position: 'bottom'\n                    },\n                    scales: {\n                        xAxes: [{\n                            type: 'time',\n                            time: {\n                                unit: 'day'\n                            }\n                        }],\n                        yAxes: [{\n                            ticks: {\n                                beginAtZero: true\n                            }\n                        }]\n                    }\n                }\n            });\n        },\n        updateData() {\n            this.createGraph();\n        }\n    }\n}\n</script>\n\n\n"],"mappings":";gCAEQA,mBAAA,CAAkC,YAA9B,2BAAyB;;;;;;;gCAIrBA,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAM,GAAC,cAAY;;EAItBC,EAAE,EAAC,SAAS;EAACC,GAAG,EAAC;;gCAGzBH,mBAAA,CAOQ,gB,aANJA,mBAAA,CAKK,a,aAJDA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAkB,YAAd,WAAS,E;;;uBAjBjCI,mBAAA,CA8BM,cA7BFC,UAAkC,EACvBC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAAoC,OAAAI,UAAA,EAAhB,YAAU,M,cAC9BJ,mBAAA,CA0BM,OAAAK,UAAA,GAzBFT,mBAAA,CAGM,cAFFU,UAAsC,E,gBACtCV,mBAAA,CAA2E;IAApEW,IAAI,EAAC,MAAM;IAACT,EAAE,EAAC,MAAM;+DAAUI,KAAA,CAAAM,YAAY,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;iEAAjCV,KAAA,CAAAM,YAAY,E,KAEtDZ,mBAAA,CAEM,cADFA,mBAAA,CAA0D,UAA1DmB,UAA0D,EAAvB,gBAAc,wB,GAErDnB,mBAAA,CAiBQ,gBAhBJoB,UAOQ,EACRpB,mBAAA,CAOQ,iB,kBANJI,mBAAA,CAKKiB,SAAA,QAAAC,WAAA,CALchB,KAAA,CAAAiB,IAAI,EAAZC,IAAI;yBAAfpB,mBAAA,CAKK;MALqBqB,GAAG,EAAED,IAAI,CAACE;QAChC1B,mBAAA,CAA2B,YAAA2B,gBAAA,CAApBH,IAAI,CAACE,OAAO,kBACnB1B,mBAAA,CAAgD,YAAA2B,gBAAA,CAAzCH,IAAI,CAACI,QAAQ,CAACC,KAAK,CAACvB,KAAA,CAAAM,YAAY,mBACvCZ,mBAAA,CAAiD,YAAA2B,gBAAA,CAA1CH,IAAI,CAACI,QAAQ,CAACE,MAAM,CAACxB,KAAA,CAAAM,YAAY,mBACxCZ,mBAAA,CAAoD,YAAA2B,gBAAA,CAA7CH,IAAI,CAACI,QAAQ,CAACG,SAAS,CAACzB,KAAA,CAAAM,YAAY,kB"},"metadata":{},"sourceType":"module","externalDependencies":[]}