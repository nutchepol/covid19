{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h2\", null, \"Cases by Country\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  id: \"myChart\",\n  ref: \"myDiv\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, _createCommentVNode(\" <Line :data=\\\"data1\\\" :options='options' id='myChart' /> \"), _createElementVNode(\"canvas\", _hoisted_2, null, 512 /* NEED_PATCH */)]);\n}","map":{"version":3,"names":["_createElementVNode","id","ref","_createElementBlock","_hoisted_1","_createCommentVNode","_hoisted_2"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/ChartCountry.vue"],"sourcesContent":["<template>\n    <div>\n        <h2>Cases by Country</h2>\n        <!-- <Line :data=\"data1\" :options='options' id='myChart' /> -->\n        <canvas id='myChart' ref='myDiv'></canvas>\n\n    </div>\n</template>\n\n<script>\nimport { Chart } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\nexport default {\n    props: ['data', 'selectedDate',],\n\n\n    data() {\n        return {\n            forecastChart: null,\n            data1:\n            {\n                type: 'line',\n                data: {\n                    labels: this.data.map(item => item.country),\n                    datasets: [{\n                        label: 'Cases',\n                        backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                        borderColor: 'rgb(255, 99, 132)',\n                        data: this.data.map(item => item.timeline.cases[this.selectedDate])\n                    }, {\n                        label: 'Deaths',\n                        backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                        borderColor: 'rgb(54, 162, 235)',\n                        data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n                    }, {\n                        label: 'Recovered',\n                        backgroundColor: 'rgba(255, 206, 86, 0.2)',\n                        borderColor: 'rgb(255, 206, 86)',\n                        data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n                    }]\n                },\n                options: {\n                    responsive: true,\n                }\n            }\n\n        }\n    },\n    mounted() {\n        const ctx = document.getElementById('myChart');\n\n        this.forecastChart = new ChartJS(ctx, this.data1)\n    },\n    method: {\n        updateChart: function () {\n            let chartStatus = Chart.getChart(this.forecastChart)  // key change\n            chartStatus.destroy()                                 // key change\n            this.animation = 0\n            this.renderChart()\n        },\n        destroyChart: function () {\n            this.forecastChart.destroy();\n        }\n\n\n    },\n    watch: {\n        selectedDate: function () {\n            // const ctx = document.getElementById('myChart');\n            // this.destroyChart()\n\n            this.data1.labels = this.data.map(item => item.country),\n                this.data1.datasets = [{\n                    label: 'Cases',\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: this.data.map(item => item.timeline.cases[this.selectedDate])\n                }, {\n                    label: 'Deaths',\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgb(54, 162, 235)',\n                    data: this.data.map(item => item.timeline.deaths[this.selectedDate])\n                }, {\n                    label: 'Recovered',\n                    backgroundColor: 'rgba(255, 206, 86, 0.2)',\n                    borderColor: 'rgb(255, 206, 86)',\n                    data: this.data.map(item => item.timeline.recovered[this.selectedDate])\n                }]\n            // this.forecastChart = new ChartJS(ctx, this.data1).getContext(\"2d\")\n            this.forecastChart.update()\n\n            // this.forecastChart.destroy()\n            // this.forecastChart.update()                  // key change\n\n            // console.log('fsddfdsf', this.selectedDate, this.chxartStatus);                    // key change\n\n\n\n        }\n    },\n\n}\n</script>\n"],"mappings":";gCAEQA,mBAAA,CAAyB,YAArB,kBAAgB;;EAEZC,EAAE,EAAC,SAAS;EAACC,GAAG,EAAC;;;uBAH7BC,mBAAA,CAKM,cAJFC,UAAyB,EACzBC,mBAAA,8DAA+D,EAC/DL,mBAAA,CAA0C,UAA1CM,UAA0C,8B"},"metadata":{},"sourceType":"module","externalDependencies":[]}