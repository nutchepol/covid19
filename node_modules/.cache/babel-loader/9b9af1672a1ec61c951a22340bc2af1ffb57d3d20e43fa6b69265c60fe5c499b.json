{"ast":null,"code":"import { Line } from 'vue-chartjs';\nimport { Chart as ChartJS, CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend } from 'chart.js';\nChartJS.register(CategoryScale, LinearScale, PointElement, LineElement, Title, Tooltip, Legend);\nexport default {\n  props: ['data', 'selectedDate'],\n  components: {\n    Line\n  },\n  data() {\n    return {\n      data1: {\n        labels: [],\n        datasets: [{\n          label: 'Cases',\n          backgroundColor: 'rgba(255, 99, 132, 0.2)',\n          borderColor: 'rgb(255, 99, 132)',\n          data: []\n        }, {\n          label: 'Deaths',\n          backgroundColor: 'rgba(54, 162, 235, 0.2)',\n          borderColor: 'rgb(54, 162, 235)',\n          data: []\n        }, {\n          label: 'Recovered',\n          backgroundColor: 'rgba(255, 206, 86, 0.2)',\n          borderColor: 'rgb(255, 206, 86)',\n          data: []\n        }]\n      },\n      options: {\n        responsive: true\n        // maintainAspectRatio: false\n      }\n    };\n  },\n\n  mounted() {\n    this.updateChartData();\n  },\n  watch: {\n    data: function () {\n      this.updateChartData();\n    },\n    selectedDate: function () {\n      this.updateChartData();\n    }\n  },\n  methods: {\n    updateChartData() {\n      this.data1.labels = this.data.map(item => item.country);\n      this.data1.datasets[0].data = this.data.map(item => item.timeline.cases[this.selectedDate]);\n      this.data1.datasets[1].data = this.data.map(item => item.timeline.deaths[this.selectedDate]);\n      this.data1.datasets[2].data = this.data.map(item => item.timeline.recovered[this.selectedDate]);\n    }\n  }\n};","map":{"version":3,"names":["Line","Chart","ChartJS","CategoryScale","LinearScale","PointElement","LineElement","Title","Tooltip","Legend","register","props","components","data","data1","labels","datasets","label","backgroundColor","borderColor","options","responsive","mounted","updateChartData","watch","selectedDate","methods","map","item","country","timeline","cases","deaths","recovered"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/ChartCountry.vue"],"sourcesContent":["<template>\n    <div>\n        <h2>Cases by Country</h2>\n        <Line :data=\"data1\" :options='options' />\n    </div>\n</template>\n\n<script>\nimport { Line } from 'vue-chartjs';\nimport {\n    Chart as ChartJS,\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n} from 'chart.js'\nChartJS.register(\n    CategoryScale,\n    LinearScale,\n    PointElement,\n    LineElement,\n    Title,\n    Tooltip,\n    Legend\n)\nexport default {\n    props: ['data', 'selectedDate'],\n    components: {\n        Line\n    },\n    data() {\n        return {\n            data1: {\n                labels: [],\n                datasets: [{\n                    label: 'Cases',\n                    backgroundColor: 'rgba(255, 99, 132, 0.2)',\n                    borderColor: 'rgb(255, 99, 132)',\n                    data: []\n                }, {\n                    label: 'Deaths',\n                    backgroundColor: 'rgba(54, 162, 235, 0.2)',\n                    borderColor: 'rgb(54, 162, 235)',\n                    data: []\n                }, {\n                    label: 'Recovered',\n                    backgroundColor: 'rgba(255, 206, 86, 0.2)',\n                    borderColor: 'rgb(255, 206, 86)',\n                    data: []\n                }]\n            },\n            options: {\n                responsive: true,\n                // maintainAspectRatio: false\n            }\n\n        }\n    },\n    mounted() {\n        this.updateChartData();\n    },\n    watch: {\n        data: function () {\n            this.updateChartData();\n        },\n        selectedDate: function () {\n            this.updateChartData();\n        }\n    },\n    methods: {\n        updateChartData() {\n            this.data1.labels = this.data.map(item => item.country);\n            this.data1.datasets[0].data = this.data.map(item => item.timeline.cases[this.selectedDate]);\n            this.data1.datasets[1].data = this.data.map(item => item.timeline.deaths[this.selectedDate]);\n            this.data1.datasets[2].data = this.data.map(item => item.timeline.recovered[this.selectedDate]);\n        }\n    }\n}\n</script>\n"],"mappings":"AAQA,SAASA,IAAG,QAAS,aAAa;AAClC,SACIC,KAAI,IAAKC,OAAO,EAChBC,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAK,QACF,UAAS;AAChBP,OAAO,CAACQ,QAAQ,CACZP,aAAa,EACbC,WAAW,EACXC,YAAY,EACZC,WAAW,EACXC,KAAK,EACLC,OAAO,EACPC,MAAK,CACT;AACA,eAAe;EACXE,KAAK,EAAE,CAAC,MAAM,EAAE,cAAc,CAAC;EAC/BC,UAAU,EAAE;IACRZ;EACJ,CAAC;EACDa,IAAIA,CAAA,EAAG;IACH,OAAO;MACHC,KAAK,EAAE;QACHC,MAAM,EAAE,EAAE;QACVC,QAAQ,EAAE,CAAC;UACPC,KAAK,EAAE,OAAO;UACdC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,mBAAmB;UAChCN,IAAI,EAAE;QACV,CAAC,EAAE;UACCI,KAAK,EAAE,QAAQ;UACfC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,mBAAmB;UAChCN,IAAI,EAAE;QACV,CAAC,EAAE;UACCI,KAAK,EAAE,WAAW;UAClBC,eAAe,EAAE,yBAAyB;UAC1CC,WAAW,EAAE,mBAAmB;UAChCN,IAAI,EAAE;QACV,CAAC;MACL,CAAC;MACDO,OAAO,EAAE;QACLC,UAAU,EAAE;QACZ;MACJ;IAEJ;EACJ,CAAC;;EACDC,OAAOA,CAAA,EAAG;IACN,IAAI,CAACC,eAAe,EAAE;EAC1B,CAAC;EACDC,KAAK,EAAE;IACHX,IAAI,EAAE,SAAAA,CAAA,EAAY;MACd,IAAI,CAACU,eAAe,EAAE;IAC1B,CAAC;IACDE,YAAY,EAAE,SAAAA,CAAA,EAAY;MACtB,IAAI,CAACF,eAAe,EAAE;IAC1B;EACJ,CAAC;EACDG,OAAO,EAAE;IACLH,eAAeA,CAAA,EAAG;MACd,IAAI,CAACT,KAAK,CAACC,MAAK,GAAI,IAAI,CAACF,IAAI,CAACc,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACC,OAAO,CAAC;MACvD,IAAI,CAACf,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAI,IAAI,CAACA,IAAI,CAACc,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACE,QAAQ,CAACC,KAAK,CAAC,IAAI,CAACN,YAAY,CAAC,CAAC;MAC3F,IAAI,CAACX,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAI,IAAI,CAACA,IAAI,CAACc,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACE,QAAQ,CAACE,MAAM,CAAC,IAAI,CAACP,YAAY,CAAC,CAAC;MAC5F,IAAI,CAACX,KAAK,CAACE,QAAQ,CAAC,CAAC,CAAC,CAACH,IAAG,GAAI,IAAI,CAACA,IAAI,CAACc,GAAG,CAACC,IAAG,IAAKA,IAAI,CAACE,QAAQ,CAACG,SAAS,CAAC,IAAI,CAACR,YAAY,CAAC,CAAC;IACnG;EACJ;AACJ"},"metadata":{},"sourceType":"module","externalDependencies":[]}