{"ast":null,"code":"import { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, resolveComponent as _resolveComponent, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = /*#__PURE__*/_createElementVNode(\"h1\", null, \"COVID-19 Dashboard\", -1 /* HOISTED */);\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = {\n  key: 1\n};\nconst _hoisted_4 = /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"date\"\n}, \"Select date:\", -1 /* HOISTED */);\nconst _hoisted_5 = {\n  class: \"table-container\"\n};\nconst _hoisted_6 = {\n  class: \"\\\"styled-table\\\"\"\n};\nconst _hoisted_7 = /*#__PURE__*/_createElementVNode(\"thead\", null, [/*#__PURE__*/_createElementVNode(\"tr\", null, [/*#__PURE__*/_createElementVNode(\"th\", null, \"Country\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Cases\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Deaths\"), /*#__PURE__*/_createElementVNode(\"th\", null, \"Recovered\")])], -1 /* HOISTED */);\n\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_ChartCountry = _resolveComponent(\"ChartCountry\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_hoisted_1, $data.loading ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, \"Loading...\")) : (_openBlock(), _createElementBlock(\"div\", _hoisted_3, [_createElementVNode(\"div\", null, [_hoisted_4, _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    id: \"date\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.showDate = $event),\n    onChange: _cache[1] || (_cache[1] = (...args) => $options.updateData && $options.updateData(...args))\n  }, null, 544 /* HYDRATE_EVENTS, NEED_PATCH */), [[_vModelText, $data.showDate]])]), _createVNode(_component_ChartCountry, {\n    data: $data.data,\n    selectedDate: $data.selectedDate\n  }, null, 8 /* PROPS */, [\"data\", \"selectedDate\"]), _createElementVNode(\"div\", _hoisted_5, [_createElementVNode(\"table\", _hoisted_6, [_hoisted_7, _createElementVNode(\"tbody\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.data, item => {\n    return _openBlock(), _createElementBlock(\"tr\", {\n      key: item.country\n    }, [_createElementVNode(\"td\", null, _toDisplayString(item.country), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.cases[$data.selectedDate]), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.deaths[$data.selectedDate]), 1 /* TEXT */), _createElementVNode(\"td\", null, _toDisplayString(item.timeline.recovered[$data.selectedDate]), 1 /* TEXT */)]);\n  }), 128 /* KEYED_FRAGMENT */))])])]), _createTextVNode(\"> \")]))]);\n}","map":{"version":3,"names":["_createElementVNode","for","class","_createElementBlock","_hoisted_1","$data","loading","_hoisted_2","_hoisted_3","_hoisted_4","type","id","showDate","$event","onChange","_cache","args","$options","updateData","_createVNode","_component_ChartCountry","data","selectedDate","_hoisted_5","_hoisted_6","_hoisted_7","_Fragment","_renderList","item","key","country","_toDisplayString","timeline","cases","deaths","recovered"],"sources":["/Users/kgreat/work/KU_project/Vue-covid/visualize-covid19/src/components/DataDisplay.vue"],"sourcesContent":["<template>\n    <div>\n        <h1>COVID-19 Dashboard</h1>\n        <div v-if=\"loading\">Loading...</div>\n        <div v-else>\n            <div>\n                <label for=\"date\">Select date:</label>\n                <input type=\"date\" id=\"date\" v-model=\"showDate\" @change=\"updateData\" />\n            </div>\n            <ChartCountry :data=\"data\" :selectedDate=\"selectedDate\" />\n            <div class=\"table-container\">\n                <table class='\"styled-table\"'>\n                    <thead>\n                        <tr>\n                            <th>Country</th>\n                            <th>Cases</th>\n                            <th>Deaths</th>\n                            <th>Recovered</th>\n                        </tr>\n                    </thead>\n                    <tbody>\n                        <tr v-for=\"item in data\" :key=\"item.country\">\n                            <td>{{ item.country }}</td>\n                            <td>{{ item.timeline.cases[selectedDate] }}</td>\n                            <td>{{ item.timeline.deaths[selectedDate] }}</td>\n                            <td>{{ item.timeline.recovered[selectedDate] }}</td>\n                        </tr>\n                    </tbody>\n                </table>\n            </div>>\n        </div>\n    </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport moment from 'moment';\nimport ChartCountry from './ChartCountry';\nexport default {\n    name: 'DataDisplay',\n    components: {\n        ChartCountry\n    },\n    data() {\n        return {\n            data: [],\n            loading: true,\n            selectedDate: '',\n            showDate: '',\n        }\n    },\n    mounted() {\n        this.getData();\n        this.showDate = moment(this.selectedDate, 'M/D/YY').format('YYYY-MM-DD');\n    },\n    methods: {\n        getData() {\n            axios.get('https://disease.sh/v3/covid-19/historical?lastdays=31')\n                .then(response => {\n                    this.data = response.data;\n                    this.selectedDate = Object.keys(this.data[0].timeline.cases)[Object.keys(this.data[0].timeline.cases).length - 1];\n                    this.loading = false;\n                })\n                .catch(error => {\n                    console.log(error);\n                });\n        },\n        updateData() {\n            this.selectedDate = moment(this.showDate).format('M/D/YY');\n        }\n    }\n}\n</script>\n<style>\n.styled-table {\n    border-collapse: collapse;\n    border: 1px solid rgb(0, 0, 0);\n    /* add a border */\n    width: 80%;\n    max-width: 800px;\n    background-color: #f8f8f8;\n    font-size: 18px;\n    text-align: center;\n    align-items: center;\n    justify-content: center;\n    align-items: center;\n    ;\n}\n\n.styled-table th {\n    background-color: #333;\n    color: #fff;\n    font-weight: bold;\n}\n\n.styled-table th,\n.styled-table td {\n    padding: 12px 15px;\n}\n\n.styled-table tbody tr:nth-of-type(even) {\n    background-color: #f2f2f2;\n}\n\n.styled-table tbody tr:hover {\n    background-color: #ddd;\n}\n</style>"],"mappings":";gCAEQA,mBAAA,CAA2B,YAAvB,oBAAkB;;;;;;;gCAIdA,mBAAA,CAAsC;EAA/BC,GAAG,EAAC;AAAM,GAAC,cAAY;;EAI7BC,KAAK,EAAC;AAAiB;;EACjBA,KAAK,EAAC;AAAgB;gCACzBF,mBAAA,CAOQ,gB,aANJA,mBAAA,CAKK,a,aAJDA,mBAAA,CAAgB,YAAZ,SAAO,G,aACXA,mBAAA,CAAc,YAAV,OAAK,G,aACTA,mBAAA,CAAe,YAAX,QAAM,G,aACVA,mBAAA,CAAkB,YAAd,WAAS,E;;;;uBAhBrCG,mBAAA,CA8BM,cA7BFC,UAA2B,EAChBC,KAAA,CAAAC,OAAO,I,cAAlBH,mBAAA,CAAoC,OAAAI,UAAA,EAAhB,YAAU,M,cAC9BJ,mBAAA,CA0BM,OAAAK,UAAA,GAzBFR,mBAAA,CAGM,cAFFS,UAAsC,E,gBACtCT,mBAAA,CAAuE;IAAhEU,IAAI,EAAC,MAAM;IAACC,EAAE,EAAC,MAAM;+DAAUN,KAAA,CAAAO,QAAQ,GAAAC,MAAA;IAAGC,QAAM,EAAAC,MAAA,QAAAA,MAAA,UAAAC,IAAA,KAAEC,QAAA,CAAAC,UAAA,IAAAD,QAAA,CAAAC,UAAA,IAAAF,IAAA,CAAU;iEAA7BX,KAAA,CAAAO,QAAQ,E,KAElDO,YAAA,CAA0DC,uBAAA;IAA3CC,IAAI,EAAEhB,KAAA,CAAAgB,IAAI;IAAGC,YAAY,EAAEjB,KAAA,CAAAiB;qDAC1CtB,mBAAA,CAmBM,OAnBNuB,UAmBM,GAlBFvB,mBAAA,CAiBQ,SAjBRwB,UAiBQ,GAhBJC,UAOQ,EACRzB,mBAAA,CAOQ,iB,kBANJG,mBAAA,CAKKuB,SAAA,QAAAC,WAAA,CALctB,KAAA,CAAAgB,IAAI,EAAZO,IAAI;yBAAfzB,mBAAA,CAKK;MALqB0B,GAAG,EAAED,IAAI,CAACE;QAChC9B,mBAAA,CAA2B,YAAA+B,gBAAA,CAApBH,IAAI,CAACE,OAAO,kBACnB9B,mBAAA,CAAgD,YAAA+B,gBAAA,CAAzCH,IAAI,CAACI,QAAQ,CAACC,KAAK,CAAC5B,KAAA,CAAAiB,YAAY,mBACvCtB,mBAAA,CAAiD,YAAA+B,gBAAA,CAA1CH,IAAI,CAACI,QAAQ,CAACE,MAAM,CAAC7B,KAAA,CAAAiB,YAAY,mBACxCtB,mBAAA,CAAoD,YAAA+B,gBAAA,CAA7CH,IAAI,CAACI,QAAQ,CAACG,SAAS,CAAC9B,KAAA,CAAAiB,YAAY,kB;yDAIrD,IACV,E"},"metadata":{},"sourceType":"module","externalDependencies":[]}